1. 空集群
	(1) 启动一个单独的节点，它没有数据和索引 ---  空集群
	(2) 一个节点就是一个elasticsearch 实例。一个集群由一个或者多个节点组成。他们具有相同的cluster.name ,
		他们协同工作。分享数据和负载。当加入或者删除一个节点，集群就会感知到并且平衡数据。
	(3) 集群中的一个节点会被选举为主节点，它将临时管理集群级别的一些变更，例如新建或者删除索引，增加或者
		移除节点等。主节点不参与文档级别的变更或搜索。意味着在流量增长的时候，该节点不会成为集群的瓶颈。
		任何节点都可以成为主节点。
	(4) 作为用户，我们能够与集群中的任何节点通信，包括主节点。每一个节点都知道文档存在于哪个节点上，它们
		 可以转发请求到相应的节点上。我们访问的节点负责收集各节点返回的数据，最后一起返回给客户端。这一切
		 都有elastic处理。

2. 集群健康
	(1) green ： 所有主要分片和复制分片都可用
	(2) yellow :   所有主要分片可用，不是所有复制分片都可用
	(3) red 		： 不是所有的主要分片都可用
	
3. 添加索引(新建库)
	(1) 索引只是一个用来指向一个或者多个分片(shards)的“逻辑命名空间”
	(2) 一个分片，是一个最小级别的工作单元。它只保存了索引中所有数据的一部分。分片就是一个lucene实例，并且
			它本身就是一个完整的搜索引擎。我们的文档存在分片中，并在分片中被索引，但是我们的应用程序不会直接与
			他们通信，取而代之的是直接与索引通信。
		 分片是elastic 在集群中分发数据的关键。文档存储于分片，分片分配到集群中的节点。当集群扩容或者缩小，
		   elastic会自动的在你的节点间迁移分片，使集群保持平衡。
		 分片可是主分片和复制分片。索引中的每个文档属于一个单独的主分片，所以主分片的数量决定了索引最多能存储多少数据。
	   复制分片只是主分片的一个副本，它可以防止硬件故障导致的数据丢失，同时可以提供读请求，比如搜索。还可以
	   		从别的分片中取回文档。
	   	默认情况下，一个索引被分配5个主分片。当索引创建完成，主分片的数量就固定了。

创建一个索引blogs。主分片为3,复制分片为1（每个住分配有一个复制分片）
PUT	/blogs
	{
			"settings"	:	{
					"number_of_shards"	:	3,
					"number_of_replicas"	:	1
			}
}
创建结束后，健康状态为yellow。可以查看为主分片都可用了，而复制分片并没有配置到节点上面。在同一个节点上
保存相同的数据副本是没有任何意义的。如这个节点故障，那么所有的数据副本也会丢失。

---现在的集群功能完备，但是依旧存在因硬件故障而导致数据丢失的情况。		
		
		
英文文档解析:
1. NRT (Near Realtime) :查询的时间很短很快.
2. Cluster 集群
3. Node 节点
4. Index 索引 类似数据库
5. Type 类似数据库的table
6. Document 类似数据库的记录

	   	
	   	
	   	
	   	
	   	
	   	
	   	
	   	
	   	
	   	
	   	
	   	
	   	
	   	